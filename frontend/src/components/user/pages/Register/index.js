import React, { useState } from 'react';
import { useFormik } from 'formik';
import * as Yup from 'yup';
import axios from 'axios';
import { useNavigate } from 'react-router-dom';
import './Register.css';
import moment from 'moment';

const Register = () => {
    const navigate = useNavigate();
    const [showPassword, setShowPassword] = useState(false);

    const togglePasswordVisibility = () => {
        setShowPassword(!showPassword);
    };

    const formik = useFormik({
        initialValues: {
            fullName: '',
            username: '',
            password: '',
            email: '',
            phoneNumber: '',
            address: '',
            dob: '',
        },
        validationSchema: Yup.object({
            fullName: Yup.string().required('H·ªç v√† t√™n ƒë∆∞·ª£c y√™u c·∫ßu'),
            username: Yup.string().required('T√™n ƒëƒÉng nh·∫≠p ƒë∆∞·ª£c y√™u c·∫ßu'),
            password: Yup.string()
                .min(12, 'Ph·∫£i c√≥ √≠t nh·∫•t 12 k√Ω t·ª±')
                .matches(/[0-9]/, 'Ph·∫£i c√≥ √≠t nh·∫•t m·ªôt s·ªë')
                .matches(/[a-z]/, 'Ph·∫£i c√≥ √≠t nh·∫•t m·ªôt k√Ω t·ª± vi·∫øt th∆∞·ªùng')
                .matches(/[A-Z]/, 'Ph·∫£i c√≥ √≠t nh·∫•t m·ªôt k√Ω t·ª± vi·∫øt hoa')
                .matches(/[^a-zA-Z0-9]/, 'Ph·∫£i c√≥ √≠t nh·∫•t m·ªôt k√Ω t·ª± ƒë·∫∑c bi·ªát')
                .required('M·∫≠t kh·∫©u ƒë∆∞·ª£c y√™u c·∫ßu'),
            email: Yup.string().email('Invalid email').required('Ph·∫£i nh·∫≠p Email'),
            phoneNumber: Yup.string().required('Ph·∫£i nh·∫≠p s·ªë ƒëi·ªán tho·∫°i'),
            address: Yup.string().required('Ph·∫£i nh·∫≠p ƒë·ªãa ch·ªâ'),
            dob: Yup.date().required('Ph·∫£i nh·∫≠p ng√†y sinh nh·∫≠t').nullable(),
        }),
        onSubmit: async (values) => {
            const formattedDateOfBirth = moment(values.dob).toISOString();
            const requestData = {
                fullName: values.fullName,
                username: values.username,
                password: values.password,
                email: values.email,
                phoneNumber: values.phoneNumber,
                address: values.address,
                DateOfBirth: formattedDateOfBirth,
            };

            try {
                await axios.post('http://localhost:5180/api/account/register', requestData);
                alert('ƒêƒÉng k√Ω th√†nh c√¥ng.');
                navigate('/login');
            } catch (error) {
                console.log('Error response:', error.response);
                if (error.response && error.response.data) {
                    if (error.response.data === 'Username/Email is already in use.') {
                        alert('T√™n ƒëƒÉng nh·∫≠p ho·∫∑c Email ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng. H√£y nh·∫≠p l·∫°i.');
                    } else {
                        alert(`ƒêƒÉng k√Ω kh√¥ng th√†nh c√¥ng: ${error.response.data}`);
                    }
                } else {
                    alert('ƒêƒÉng k√Ω kh√¥ng th√†nh c√¥ng! H√£y nh·∫≠p l·∫°i.');
                }
            }
        },
    });

    return (
        <div className="register-container">
            <div className="register-box">
                <h2 className="register-title">T·∫°o t√†i kho·∫£n m·ªõi</h2>
                <form onSubmit={formik.handleSubmit}>
                    <div className="input-group">
                        <input
                            type="text"
                            name="fullName"
                            placeholder="H·ªç v√† t√™n"
                            onChange={formik.handleChange}
                            onBlur={formik.handleBlur}
                            value={formik.values.fullName}
                        />
                        {formik.errors.fullName && formik.touched.fullName && (
                            <p className="error-message">{formik.errors.fullName}</p>
                        )}
                    </div>
                    <div className="input-group">
                        <input
                            type="text"
                            name="username"
                            placeholder="T√™n ƒëƒÉng nh·∫≠p"
                            onChange={formik.handleChange}
                            onBlur={formik.handleBlur}
                            value={formik.values.username}
                        />
                        {formik.errors.username && formik.touched.username && (
                            <p className="error-message">{formik.errors.username}</p>
                        )}
                    </div>
                    <div className="input-group password-group">
                        <input
                            type={showPassword ? 'text' : 'password'}
                            name="password"
                            placeholder="M·∫≠t kh·∫©u"
                            onChange={formik.handleChange}
                            onBlur={formik.handleBlur}
                            value={formik.values.password}
                        />
                        <span className="eye-icon" onClick={togglePasswordVisibility}>
                            {showPassword ? 'üôà' : 'üëÅ'}
                        </span>
                    </div>

                    {formik.errors.password && formik.touched.password && (
                        <p className="error-message">{formik.errors.password}</p>
                    )}

                    <div className="input-group">
                        <input
                            type="email"
                            name="email"
                            placeholder="Email"
                            onChange={formik.handleChange}
                            onBlur={formik.handleBlur}
                            value={formik.values.email}
                        />
                        {formik.errors.email && formik.touched.email && (
                            <p className="error-message">{formik.errors.email}</p>
                        )}
                    </div>
                    <div className="input-group">
                        <input
                            type="text"
                            name="phoneNumber"
                            placeholder="S·ªë ƒëi·ªán tho·∫°i"
                            onChange={formik.handleChange}
                            onBlur={formik.handleBlur}
                            value={formik.values.phoneNumber}
                        />
                        {formik.errors.phoneNumber && formik.touched.phoneNumber && (
                            <p className="error-message">{formik.errors.phoneNumber}</p>
                        )}
                    </div>
                    <div className="input-group">
                        <input
                            type="text"
                            name="address"
                            placeholder="ƒê·ªãa ch·ªâ"
                            onChange={formik.handleChange}
                            onBlur={formik.handleBlur}
                            value={formik.values.address}
                        />
                        {formik.errors.address && formik.touched.address && (
                            <p className="error-message">{formik.errors.address}</p>
                        )}
                    </div>
                    <div className="input-group">
                        <input
                            type="date"
                            name="dob"
                            onChange={formik.handleChange}
                            onBlur={formik.handleBlur}
                            value={formik.values.dob}
                        />
                        {formik.errors.dob && formik.touched.dob && (
                            <p className="error-message">{formik.errors.dob}</p>
                        )}
                    </div>
                    <button type="submit" className="register-button">
                        ƒêƒÉng k√Ω
                    </button>
                </form>
            </div>
        </div>
    );
};

export default Register;
