import { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import './ResetPassword.module.scss';
import * as Yup from 'yup';
import classNames from 'classnames/bind';
import style from './ResetPassword.module.scss';

const cs = classNames.bind(style);

function ForgotPassword() {
    const [username, setUsername] = useState('');
    const [email, setEmail] = useState('');
    const [otp, setOtp] = useState('');
    const [newPassword, setNewPassword] = useState('');
    const [confirmPassword, setConfirmPassword] = useState('');
    const [step, setStep] = useState(1);
    const [timeLeft, setTimeLeft] = useState(0);
    const [showPasswords, setShowPasswords] = useState({
        new: false,
        confirm: false,
    });
    const navigate = useNavigate();
    const [errors, setErrors] = useState({
        username: '',
        email: '',
        newPassword: '',
        confirmPassword: '',
        otp: '',
    });

    useEffect(() => {
        if (timeLeft > 0) {
            const timer = setInterval(() => {
                setTimeLeft((prev) => prev - 1);
            }, 1000);
            return () => clearInterval(timer);
        }
    }, [timeLeft]);

    const togglePasswordVisibility = (field) => {
        setShowPasswords((prev) => ({ ...prev, [field]: !prev[field] }));
    };

    const handleBlur = async (field, value) => {
        let errorMessage = '';

        if (value.trim() === '') {
            errorMessage = 'Kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng';
        } else if (field === 'newPassword' || field === 'confirmPassword') {
            const passwordSchema = Yup.string()
                .min(12, 'M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 12 k√Ω t·ª±')
                .matches(/[0-9]/, 'M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t m·ªôt s·ªë')
                .matches(/[a-z]/, 'M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t m·ªôt k√Ω t·ª± vi·∫øt th∆∞·ªùng')
                .matches(/[A-Z]/, 'M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t m·ªôt k√Ω t·ª± vi·∫øt hoa')
                .matches(/[^a-zA-Z0-9]/, 'M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t m·ªôt k√Ω t·ª± ƒë·∫∑c bi·ªát')
                .required('M·∫≠t kh·∫©u ƒë∆∞·ª£c y√™u c·∫ßu');

            try {
                await passwordSchema.validate(value);
            } catch (error) {
                errorMessage = error.message;
            }

            // Ki·ªÉm tra x√°c nh·∫≠n m·∫≠t kh·∫©u c√≥ kh·ªõp kh√¥ng
            if (field === 'confirmPassword' && value !== newPassword) {
                errorMessage = 'M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng kh·ªõp!';
            }
        }

        setErrors((prev) => ({
            ...prev,
            [field]: errorMessage,
        }));
    };

    const verifyUser = async () => {
        if (!username.trim() || !email.trim()) {
            alert('Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß t√™n ƒëƒÉng nh·∫≠p v√† email!');
            return;
        }

        const response = await fetch('http://localhost:5180/api/account/send-verification-code', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ username, email }),
        });

        if (response.ok) {
            alert('M√£ x√°c nh·∫≠n ƒë√£ ƒë∆∞·ª£c g·ª≠i!');
            setStep(2);
            setTimeLeft(90);
        } else {
            alert('Username ho·∫∑c Email kh√¥ng ƒë√∫ng!');
        }
    };

    const sendOtp = async () => {
        if (timeLeft > 0) return;
        console.log('G·ª≠i y√™u c·∫ßu l·∫•y OTP m·ªõi...');
        await verifyUser();
        setOtp('');
    };

    const changePassword = async () => {
        if (!otp.trim()) {
            alert('Vui l√≤ng nh·∫≠p m√£ OTP!');
            return;
        }

        if (errors.newPassword || errors.confirmPassword) {
            alert('Vui l√≤ng nh·∫≠p m·∫≠t kh·∫©u h·ª£p l·ªá!');
            return;
        }

        const passwordSchema = Yup.string()
            .min(12, 'M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 12 k√Ω t·ª±')
            .matches(/[0-9]/, 'M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t m·ªôt s·ªë')
            .matches(/[a-z]/, 'M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t m·ªôt k√Ω t·ª± vi·∫øt th∆∞·ªùng')
            .matches(/[A-Z]/, 'M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t m·ªôt k√Ω t·ª± vi·∫øt hoa')
            .matches(/[^a-zA-Z0-9]/, 'M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t m·ªôt k√Ω t·ª± ƒë·∫∑c bi·ªát')
            .required('M·∫≠t kh·∫©u ƒë∆∞·ª£c y√™u c·∫ßu');

        try {
            await passwordSchema.validate(newPassword);
        } catch (error) {
            alert(error.message);
            return;
        }

        if (newPassword !== confirmPassword) {
            alert('M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng kh·ªõp!');
            return;
        }

        const response = await fetch('http://localhost:5180/api/account/forgot-password', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ username, email, otpCode: otp, newPassword }),
        });

        let data;
        try {
            data = await response.clone().json();
        } catch (error) {
            data = await response.text();
        }

        if (response.ok) {
            alert('ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng!');
            navigate('/login');
        } else {
            alert(data.message || data);
            console.error('L·ªói ƒë·ªïi m·∫≠t kh·∫©u:', data);
        }
    };

    return (
        <div className={cs('resetpassword')}>
            {step === 1 ? (
                <div className={cs('resetpassword-verify')}>
                    <h3 className={cs('resetpassword-title')}>X√°c minh t√†i kho·∫£n</h3>
                    <input
                        className={cs('resetpassword-input', { 'error-input': errors.username })}
                        type="text"
                        value={username}
                        onChange={(e) => setUsername(e.target.value)}
                        onBlur={(e) => handleBlur('username', e.target.value)}
                        placeholder="T√™n ƒëƒÉng nh·∫≠p"
                    />
                    {errors.username && <p className={cs('error-text')}>{errors.username}</p>}

                    <input
                        className={cs('resetpassword-input', { 'error-input': errors.email })}
                        type="email"
                        value={email}
                        onChange={(e) => setEmail(e.target.value)}
                        onBlur={(e) => handleBlur('email', e.target.value)}
                        placeholder="Email"
                    />
                    {errors.email && <p className={cs('error-text')}>{errors.email}</p>}

                    <button className={cs('resetpassword-button', 'primary')} onClick={verifyUser}>
                        Ti·∫øp t·ª•c
                    </button>
                </div>
            ) : (
                <div className={cs('resetpassword-change')}>
                    <h3 className={cs('resetpassword-title')}>ƒê·ªïi m·∫≠t kh·∫©u</h3>
                    <div className={cs('resetpassword-group')}>
                        <input
                            className={cs('resetpassword-input', {
                                'error-input': errors.newPassword,
                            })}
                            type={showPasswords.new ? 'text' : 'password'}
                            value={newPassword}
                            onChange={(e) => setNewPassword(e.target.value)}
                            onBlur={(e) => handleBlur('newPassword', e.target.value)}
                            placeholder="M·∫≠t kh·∫©u m·ªõi"
                        />
                        <span
                            className={cs('resetpassword-eye')}
                            onClick={() => togglePasswordVisibility('new')}
                        >
                            {showPasswords.new ? 'üôà' : 'üëÅ'}
                        </span>
                    </div>
                    {errors.newPassword && <p className={cs('error-text')}>{errors.newPassword}</p>}
                    <div className={cs('resetpassword-group')}>
                        <input
                            className={cs('resetpassword-input', {
                                'error-input': errors.confirmPassword,
                            })}
                            type={showPasswords.confirm ? 'text' : 'password'}
                            value={confirmPassword}
                            onChange={(e) => setConfirmPassword(e.target.value)}
                            onBlur={(e) => handleBlur('confirmPassword', e.target.value)}
                            placeholder="X√°c nh·∫≠n m·∫≠t kh·∫©u m·ªõi"
                        />
                        <span
                            className={cs('resetpassword-eye')}
                            onClick={() => togglePasswordVisibility('confirm')}
                        >
                            {showPasswords.confirm ? 'üôà' : 'üëÅ'}
                        </span>
                    </div>
                    {errors.confirmPassword && (
                        <p className={cs('error-text')}>{errors.confirmPassword}</p>
                    )}
                    <div className={cs('resetpassword-otp')}>
                        <input
                            className={cs('resetpassword-input', { 'error-input': errors.otp })}
                            type="text"
                            value={otp}
                            onChange={(e) => setOtp(e.target.value)}
                            onBlur={(e) => handleBlur('otp', e.target.value)}
                            placeholder="Nh·∫≠p OTP"
                        />

                        <button
                            className={cs('resetpassword-button', 'secondary')}
                            onClick={sendOtp}
                            disabled={timeLeft > 0}
                        >
                            {timeLeft > 0 ? `G·ª≠i l·∫°i (${timeLeft}s)` : 'G·ª≠i m√£'}
                        </button>
                    </div>
                    {errors.otp && <p className={cs('error-text')}>{errors.otp}</p>}
                    <button
                        className={cs('resetpassword-button', 'primary')}
                        onClick={changePassword}
                    >
                        ƒê·ªïi m·∫≠t kh·∫©u
                    </button>
                </div>
            )}
        </div>
    );
}

export default ForgotPassword;
